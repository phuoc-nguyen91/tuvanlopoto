import streamlit as st
import pandas as pd
import re
import pypdf # Streamlit Cloud ƒë√£ c√≥ s·∫µn th∆∞ vi·ªán n√†y

# --- PH·∫¶N 1: X·ª¨ L√ù V√Ä T·∫¢I D·ªÆ LI·ªÜU ---
# (Ph·∫ßn code n√†y s·∫Ω ƒë∆∞·ª£c streamlit cache l·∫°i ƒë·ªÉ ch·∫°y nhanh h∆°n)
@st.cache_data
def load_data():
    """
    H√†m n√†y s·∫Ω t·∫£i, x·ª≠ l√Ω v√† k·∫øt h·ª£p t·∫•t c·∫£ c√°c file d·ªØ li·ªáu.
    Streamlit s·∫Ω l∆∞u k·∫øt qu·∫£ v√†o cache ƒë·ªÉ kh√¥ng ph·∫£i ch·∫°y l·∫°i m·ªói l·∫ßn ng∆∞·ªùi d√πng t∆∞∆°ng t√°c.
    """
    # --- H√†m con ƒë·ªÉ x·ª≠ l√Ω file B·∫£ng gi√° PDF ---
    def parse_price_pdf(file_path):
        try:
            with open(file_path, "rb") as f:
                reader = pypdf.PdfReader(f)
                full_text = "".join(page.extract_text() for page in reader.pages)
        except FileNotFoundError:
            st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file {file_path}. Vui l√≤ng ƒë·∫£m b·∫£o file n√†y n·∫±m c√πng th∆∞ m·ª•c v·ªõi file app.py")
            return pd.DataFrame()

        # D√πng regex ƒë·ªÉ t√¨m c√°c d√≤ng d·ªØ li·ªáu h·ª£p l·ªá
        # M·∫´u regex t√¨m: (s·ªë),"(quy c√°ch)","(m√£ gai)","(xu·∫•t x·ª©)","(gi√°)"
        # Regex ƒë∆∞·ª£c c·∫£i ti·∫øn ƒë·ªÉ x·ª≠ l√Ω c√°c d√≤ng b·ªã ng·∫Øt
        pattern = re.compile(r'\"(\d+)\s*\",\"(.*?)\s*\",\"(.*?)\s*\",\"(.*?)\s*\",\"([\d,]+?)\s*\"', re.DOTALL)
        matches = pattern.findall(full_text)
        
        if not matches:
             st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file PDF. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file B·∫£ng gi√°.")
             return pd.DataFrame()

        df = pd.DataFrame(matches, columns=['stt', 'quy_cach', 'ma_gai', 'xuat_xu', 'gia_ban_le'])
        
        # D·ªçn d·∫πp d·ªØ li·ªáu
        df['gia_ban_le'] = df['gia_ban_le'].str.replace(',', '').astype(float)
        df['quy_cach'] = df['quy_cach'].str.strip()
        df['ma_gai'] = df['ma_gai'].str.strip()
        df['xuat_xu'] = df['xuat_xu'].str.strip()
        return df

    # --- T·∫£i c√°c file CSV ---
    try:
        df_prices = parse_price_pdf('B·∫¢NG GI√Å B√ÅN L·∫∫_19_05_2025 - b·∫£ng gi√° b√°n l·∫ª TL.pdf')
        
        df_magai = pd.read_csv('M√£ Gai LINGLONG - M√£ Gai.csv')
        # ƒê·ªïi t√™n c·ªôt m·ªôt c√°ch an to√†n
        df_magai.columns = ['ma_gai', 'mo_ta_gai', 'nhu_cau'][:len(df_magai.columns)]
        df_magai['ma_gai'] = df_magai['ma_gai'].str.strip()

        df_xe1 = pd.read_csv('xe, ƒë·ªùi xe,lop theo xe.........xls - Tyre-1.csv')
        df_xe2 = pd.read_csv('xe, ƒë·ªùi xe,lop theo xe.........xls - tyre b·ªï sung.csv')
        df_xe = pd.concat([df_xe1, df_xe2], ignore_index=True)
        # ƒê·ªïi t√™n c·ªôt m·ªôt c√°ch an to√†n
        df_xe.columns = ['hang_xe', 'mau_xe', 'doi_xe', 'quy_cach'][:len(df_xe.columns)]
        df_xe.dropna(subset=['hang_xe', 'mau_xe', 'quy_cach'], inplace=True)
        df_xe['quy_cach'] = df_xe['quy_cach'].str.strip()
        df_xe['display_name'] = df_xe['hang_xe'] + " " + df_xe['mau_xe']


    except FileNotFoundError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu - {e.filename}. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return pd.DataFrame(), pd.DataFrame()

    # --- K·∫øt h·ª£p d·ªØ li·ªáu ---
    df_master = pd.merge(df_prices, df_magai, on='ma_gai', how='left')
    df_master['nhu_cau'] = df_master['nhu_cau'].fillna('Ti√™u chu·∫©n')
    df_master['mo_ta_gai'] = df_master['mo_ta_gai'].fillna('Gai l·ªëp ti√™u chu·∫©n c·ªßa Linglong.')
    
    return df_master, df_xe

# T·∫£i d·ªØ li·ªáu khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
df_master, df_xe = load_data()


# --- PH·∫¶N 2: X√ÇY D·ª∞NG GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI) ---

st.set_page_config(page_title="C√¥ng C·ª• T∆∞ V·∫•n L·ªëp Xe", layout="wide")

# Ti√™u ƒë·ªÅ ch√≠nh c·ªßa ·ª©ng d·ª•ng
st.title("Ô∏èüöó B·ªò C√îNG C·ª§ T∆Ø V·∫§N L·ªêP XE LINGLONG")
st.markdown("X√¢y d·ª±ng b·ªüi **Chuy√™n Gia L·ªëp Th·∫ßm L·∫∑ng** - D√†nh cho nh·ªØng l·ª±a ch·ªçn s√°ng su·ªët.")

# N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu th√¨ d·ª´ng l·∫°i
if df_master.empty or df_xe.empty:
    st.warning("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng do l·ªói t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c file.")
else:
    # T·∫°o c√°c Tab ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa 2 c√¥ng c·ª•
    tab1, tab2 = st.tabs(["**‚öôÔ∏è C√¥ng C·ª• T∆∞ V·∫•n L·ªëp Xe**", "**üßÆ C√¥ng C·ª• T√≠nh Chi Ph√≠ L·ªëp**"])

    # --- Giao di·ªán cho Tab 1: T∆∞ v·∫•n l·ªëp ---
    with tab1:
        st.header("T√¨m l·ªëp Linglong ph√π h·ª£p v·ªõi xe c·ªßa b·∫°n")
        
        col1, col2, col3 = st.columns(3)

        with col1:
            # 1. Ch·ªçn h√£ng xe
            hang_xe_list = sorted(df_xe['hang_xe'].unique())
            selected_hang_xe = st.selectbox("1. Ch·ªçn H√£ng Xe:", hang_xe_list)

        with col2:
            # 2. Ch·ªçn m·∫´u xe (danh s√°ch s·∫Ω t·ª± c·∫≠p nh·∫≠t theo h√£ng xe)
            mau_xe_list = sorted(df_xe[df_xe['hang_xe'] == selected_hang_xe]['mau_xe'].unique())
            selected_mau_xe = st.selectbox("2. Ch·ªçn M·∫´u Xe:", mau_xe_list)

        # L·∫•y quy c√°ch l·ªëp t∆∞∆°ng ·ª©ng
        lop_theo_xe_series = df_xe[(df_xe['hang_xe'] == selected_hang_xe) & (df_xe['mau_xe'] == selected_mau_xe)]['quy_cach']
        
        if not lop_theo_xe_series.empty:
            lop_theo_xe = lop_theo_xe_series.iloc[0]
            with col3:
                 st.text_input("3. K√≠ch th∆∞·ªõc l·ªëp theo xe:", value=lop_theo_xe, disabled=True)
            
            # 4. Ch·ªçn nhu c·∫ßu s·ª≠ d·ª•ng
            nhu_cau_list = sorted(df_master['nhu_cau'].unique())
            selected_nhu_cau = st.selectbox("4. Ch·ªçn nhu c·∫ßu ch√≠nh c·ªßa b·∫°n:", nhu_cau_list, help="√äm √°i, Ti·∫øt ki·ªám, Th·ªÉ thao hay ƒêa d·ª•ng?")

            # 5. N√∫t t√¨m ki·∫øm
            if st.button("üîç T√¨m L·ªëp Ngay", type="primary"):
                # L·ªçc k·∫øt qu·∫£
                results = df_master[(df_master['quy_cach'] == lop_theo_xe) & (df_master['nhu_cau'] == selected_nhu_cau)]
                
                st.success(f"ƒê√£ t√¨m th·∫•y **{len(results)}** lo·∫°i l·ªëp ph√π h·ª£p cho xe **{selected_hang_xe} {selected_mau_xe}** v·ªõi k√≠ch th∆∞·ªõc **{lop_theo_xe}**.")

                if not results.empty:
                    for index, row in results.iterrows():
                        with st.expander(f"**M√£ gai: {row['ma_gai']}** - Gi√°: {row['gia_ban_le']:,} VNƒê", expanded=True):
                            st.markdown(f"**- M√¥ t·∫£:** {row['mo_ta_gai']}")
                            st.markdown(f"**- Nhu c·∫ßu:** {row['nhu_cau']}")
                            st.markdown(f"**- Xu·∫•t x·ª©:** {row['xuat_xu'].title()}")
                            st.markdown(f"---")
                else:
                    st.warning("R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y l·ªëp Linglong n√†o kh·ªõp ch√≠nh x√°c v·ªõi l·ª±a ch·ªçn n√†y. Th·ª≠ ch·ªçn nhu c·∫ßu 'Ti√™u chu·∫©n' xem sao nh√©!")
        else:
            st.info("Vui l√≤ng ch·ªçn xe v√† nhu c·∫ßu r·ªìi nh·∫•n n√∫t 'T√¨m L·ªëp Ngay'.")

    # --- Giao di·ªán cho Tab 2: T√≠nh chi ph√≠ l·ªëp ---
    with tab2:
        st.header("∆Ø·ªõc t√≠nh chi ph√≠ s·ª≠ d·ª•ng l·ªëp tr√™n m·ªói Kil√¥m√©t")
        
        col1_cost, col2_cost = st.columns(2)

        with col1_cost:
            gia_lop = st.number_input("Nh·∫≠p gi√° 1 l·ªëp xe (VNƒê):", min_value=0, step=100000)
            tuoi_tho = st.number_input("Tu·ªïi th·ªç d·ª± ki·∫øn c·ªßa l·ªëp (km):", min_value=10000, step=5000, value=45000, 
                                     help="Th√¥ng th∆∞·ªùng, l·ªëp xe ƒëi ƒë∆∞·ª£c t·ª´ 40,000 km ƒë·∫øn 70,000 km t√πy lo·∫°i v√† ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng.")

        if gia_lop > 0 and tuoi_tho > 0:
            chi_phi_per_km = gia_lop / tuoi_tho
            with col2_cost:
                st.metric(label="CHI PH√ç ∆Ø·ªöC T√çNH M·ªñI KM", 
                          value=f"{chi_phi_per_km:,.2f} VNƒê / km",
                          help="Chi ph√≠ n√†y ch·ªâ mang t√≠nh tham kh·∫£o, kh√¥ng bao g·ªìm c√°c chi ph√≠ l·∫Øp ƒë·∫∑t, c√¢n b·∫±ng ƒë·ªông...")
        else:
            with col2_cost:
                st.info("Nh·∫≠p gi√° v√† tu·ªïi th·ªç d·ª± ki·∫øn ƒë·ªÉ xem chi ph√≠.")
