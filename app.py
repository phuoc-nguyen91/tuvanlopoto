import streamlit as st
import pandas as pd
import re
import google.generativeai as genai

# --- PH·∫¶N 1: C·∫§U H√åNH TRANG WEB ---
st.set_page_config(page_title="C√¥ng C·ª• Tra C·ª©u L·ªëp Xe", layout="wide")

# --- PH·∫¶N 1.5: C·∫§U H√åNH API AN TO√ÄN V·ªöI STREAMLIT SECRETS ---
api_configured = False
try:
    if 'google_api_key' in st.secrets:
        genai.configure(api_key=st.secrets["google_api_key"])
        api_configured = True
except Exception as e:
    print(f"L·ªói c·∫•u h√¨nh API: {e}")


# --- PH·∫¶N 2: T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ---
@st.cache_data
def load_tire_data():
    """
    H√†m n√†y c√≥ nhi·ªám v·ª• t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu l·ªëp t·ª´ c√°c file CSV.
    """
    try:
        df_prices_raw = pd.read_csv('B·∫¢NG GI√Å B√ÅN L·∫∫_19_05_2025.csv', dtype=str)
        df_magai_raw = pd.read_csv('M√£ Gai LINGLONG.csv', dtype=str)

        # X·ª¨ L√ù B·∫¢NG GI√Å
        price_cols = ['stt', 'quy_cach', 'ma_gai', 'gia_ban_le']
        df_prices = df_prices_raw.iloc[:, :len(price_cols)]
        df_prices.columns = price_cols
        
        if 'gia_ban_le' in df_prices.columns:
            df_prices['gia_ban_le'] = pd.to_numeric(
                df_prices['gia_ban_le'].str.replace(r'[^\d]', '', regex=True), 
                errors='coerce'
            )
            df_prices.dropna(subset=['gia_ban_le'], inplace=True)

        # X·ª¨ L√ù M√î T·∫¢ M√É GAI
        magai_cols = ['ma_gai', 'nhu_cau', 'ung_dung_cu_the', 'uu_diem_cot_loi', 'link_hinh_anh']
        df_magai = df_magai_raw.iloc[:, :len(magai_cols)]
        df_magai.columns = magai_cols
        
        # K·∫æT H·ª¢P D·ªÆ LI·ªÜU
        df_master = pd.merge(df_prices, df_magai, on='ma_gai', how='left')

        # ƒêi·ªÅn v√† l√†m s·∫°ch d·ªØ li·ªáu
        for col in ['nhu_cau', 'ung_dung_cu_the', 'uu_diem_cot_loi', 'link_hinh_anh']:
            if col not in df_master.columns:
                df_master[col] = 'Ch∆∞a c√≥ th√¥ng tin'
            df_master[col] = df_master[col].fillna('Ch∆∞a c√≥ th√¥ng tin')

        for col in df_master.columns:
             if df_master[col].dtype == 'object':
                df_master[col] = df_master[col].str.strip()
        
        df_master['base_size'] = df_master['quy_cach'].str.split(' ').str[0]

        return df_master

    except FileNotFoundError as e:
        st.error(f"L·ªói kh√¥ng t√¨m th·∫•y file: **{e.filename}**. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n file.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·ªçc file: {e}")
        return pd.DataFrame()


# --- PH·∫¶N 3: KH·ªûI T·∫†O V√Ä CH·∫†Y ·ª®NG D·ª§NG ---
df_master = load_tire_data()

st.title("Ô∏èüöó B·ªò C√îNG C·ª§ T∆Ø V·∫§N L·ªêP XE LINGLONG")
st.markdown("X√¢y d·ª±ng b·ªüi **Chuy√™n Gia L·ªëp Th·∫ßm L·∫∑ng** - D√†nh cho nh·ªØng l·ª±a ch·ªçn s√°ng su·ªët.")

if df_master.empty:
    st.warning("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng do l·ªói t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói ·ªü tr√™n.")
else:
    # TH√äM T√çNH NƒÇNG: Th√™m Tab Chatbot
    tab_search, tab_chatbot, tab_cost = st.tabs([
        "**üîç Tra C·ª©u L·ªëp Theo Size**", 
        "**ü§ñ Chat V·ªõi Tr·ª£ L√Ω AI**",
        "**üßÆ T√≠nh Chi Ph√≠ L·ªëp**"
    ])

    # --- C√¥ng c·ª• 1: Tra c·ª©u gi√° theo size ---
    with tab_search:
        st.header("Tra c·ª©u l·ªëp Linglong theo k√≠ch th∆∞·ªõc")
        
        unique_sizes = sorted(df_master['base_size'].dropna().unique())
        options = ["--- Ch·ªçn ho·∫∑c t√¨m size l·ªëp ---"] + unique_sizes
        
        size_query = st.selectbox(
            "Ch·ªçn k√≠ch th∆∞·ªõc l·ªëp b·∫°n mu·ªën t√¨m:", 
            options=options,
            help="B·∫°n c√≥ th·ªÉ g√µ ƒë·ªÉ t√¨m ki·∫øm size trong danh s√°ch."
        )

        if size_query != "--- Ch·ªçn ho·∫∑c t√¨m size l·ªëp ---":
            search_term = size_query
            results = df_master[df_master['base_size'] == search_term].copy()
            
            if 'gia_ban_le' in results.columns:
                results = results.sort_values(by="gia_ban_le")

            st.write("---")
            st.subheader(f"K·∫øt qu·∫£ tra c·ª©u cho \"{search_term}\"")
            
            if not results.empty:
                st.success(f"ƒê√£ t√¨m th·∫•y **{len(results)}** s·∫£n ph·∫©m ph√π h·ª£p.")
                
                for index, row in results.iterrows():
                    price_str = f"{row['gia_ban_le']:,} VNƒê" if pd.notna(row['gia_ban_le']) else "Ch∆∞a c√≥ gi√°"
                    col_title, col_price = st.columns([3, 1])
                    with col_title:
                        st.markdown(f"#### {row['quy_cach']} / {row['ma_gai']}")
                    with col_price:
                        st.markdown(f"<div style='text-align: right; font-size: 1.2em; color: #28a745; font-weight: bold;'>{price_str}</div>", unsafe_allow_html=True)
                    
                    # THAY ƒê·ªîI: S·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o n·ªôi dung cho ph·∫ßn "∆Øu ƒëi·ªÉm c·ªët l√µi"
                    if api_configured:
                        try:
                            # T·ªëi ∆∞u prompt ƒë·ªÉ AI tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m
                            prompt = (
                                f"V·ªõi vai tr√≤ l√† m·ªôt chuy√™n gia t∆∞ v·∫•n l·ªëp xe, h√£y vi·∫øt m·ªôt ƒëo·∫°n ng·∫Øn (2-3 c√¢u) n√™u b·∫≠t c√°c ∆∞u ƒëi·ªÉm c·ªët l√µi c·ªßa l·ªëp Linglong c√≥ th√¥ng s·ªë {row['quy_cach']} v√† m√£ gai {row['ma_gai']}. "
                                f"Sau ƒë√≥, li·ªát k√™ d∆∞·ªõi d·∫°ng g·∫°ch ƒë·∫ßu d√≤ng m·ªôt v√†i d√≤ng xe ph·ªï bi·∫øn t·∫°i Vi·ªát Nam th∆∞·ªùng s·ª≠ d·ª•ng lo·∫°i l·ªëp n√†y."
                                f"S·ª≠ d·ª•ng th√¥ng tin g·ª£i √Ω sau n·∫øu c√≥: {row['uu_diem_cot_loi']}."
                            )
                            model = genai.GenerativeModel('gemini-1.5-pro-latest')
                            with st.spinner("AI ƒëang ph√¢n t√≠ch s·∫£n ph·∫©m..."):
                                response = model.generate_content(prompt)
                                st.markdown(response.text)
                        except Exception as e:
                            # N·∫øu AI l·ªói, hi·ªÉn th·ªã th√¥ng tin c√≥ s·∫µn
                            st.markdown(f"**üëç ∆Øu ƒëi·ªÉm c·ªët l√µi:** {row['uu_diem_cot_loi']}")
                            st.warning(f"Kh√¥ng th·ªÉ t·∫£i g·ª£i √Ω t·ª´ AI: {e}")
                    else:
                        # Hi·ªÉn th·ªã th√¥ng tin m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ API key
                        st.markdown(f"**üëç ∆Øu ƒëi·ªÉm c·ªët l√µi:** {row['uu_diem_cot_loi']}")
                    #st.markdown(f"**üëç ∆Øu ƒëi·ªÉm c·ªët l√µi:** {row['uu_diem_cot_loi']}")
                    if pd.notna(row['gia_ban_le']):
                        with st.container():
                            st.markdown("üéÅ **B√°o gi√° khuy·∫øn m√£i:**")
                            price_for_2 = (row['gia_ban_le'] * 2) * 0.95
                            price_for_4 = (row['gia_ban_le'] * 4) * 0.90
                            promo_col1, promo_col2 = st.columns(2)
                            with promo_col1:
                                st.markdown(f"&nbsp;&nbsp;&nbsp;‚Ä¢ Mua 2 l·ªëp (gi·∫£m 5%): **<span style='color: #ff4b4b;'>{price_for_2:,.0f} VNƒê</span>**", unsafe_allow_html=True)
                            with promo_col2:
                                st.markdown(f"&nbsp;&nbsp;&nbsp;‚Ä¢ Mua 4 l·ªëp (gi·∫£m 10%): **<span style='color: #ff4b4b;'>{price_for_4:,.0f} VNƒê</span>**", unsafe_allow_html=True)
                    st.markdown("---")

                st.markdown("##### **ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† b√°o gi√° t·ªët nh·∫•t, vui l√≤ng li√™n h·ªá:**")
                col_cta_1, col_cta_2 = st.columns([2,1])
                with col_cta_1:
                    st.markdown("üìû **HOTLINE:** **0943 24 24 24**")
                    st.markdown("üí¨ **Zalo:** [https://zalo.me/0943242424](https://zalo.me/0943242424)")
                    st.markdown("üìç **ƒê·ªãa ch·ªâ:** 114 ƒê∆∞·ªùng S·ªë 2, Tr∆∞·ªùng Th·ªç, Th·ªß ƒê·ª©c, TPHCM")
                with col_cta_2:
                    try:
                        st.image("qr.jpg", width=150, caption="Qu√©t m√£ ƒë·ªÉ k·∫øt b·∫°n Zalo")
                    except Exception as e:
                        st.info("Kh√¥ng t√¨m th·∫•y file qr.jpg")
                st.markdown("<hr style='border: 2px solid #ff4b4b; border-radius: 5px;'/>", unsafe_allow_html=True)
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc b·∫°n ƒë√£ nh·∫≠p.")
        else:
            st.info("Vui l√≤ng ch·ªçn m·ªôt k√≠ch th∆∞·ªõc l·ªëp t·ª´ danh s√°ch ·ªü tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu tra c·ª©u.")

    # --- C√¥ng c·ª• 2: Chatbot ---
    with tab_chatbot:
        st.header("Tr·ª£ L√Ω AI T∆∞ V·∫•n L·ªëp Xe")

        if not api_configured:
            st.warning("T√≠nh nƒÉng Chatbot y√™u c·∫ßu API Key. Vui l√≤ng c·∫•u h√¨nh trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng.")
        else:
            # Kh·ªüi t·∫°o m√¥ h√¨nh v√† l·ªãch s·ª≠ chat
            model = genai.GenerativeModel('gemini-1.5-pro-latest')
            if "chat_session" not in st.session_state:
                # Cung c·∫•p "b·ªô n√£o" cho chatbot
                system_prompt = (
                    "**B·ªêI C·∫¢NH:** B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n b√°n h√†ng c·∫•p cao, am hi·ªÉu s√¢u s·∫Øc v·ªÅ s·∫£n ph·∫©m l·ªëp xe Linglong t·∫°i th·ªã tr∆∞·ªùng Vi·ªát Nam. B·∫°n ƒëang chat v·ªõi kh√°ch h√†ng qua Messenger. M·ª•c ti√™u cu·ªëi c√πng l√† ch·ªët ƒë∆°n ho·∫∑c l·∫•y ƒë∆∞·ª£c th√¥ng tin li√™n h·ªá c·ªßa kh√°ch h√†ng."
                    "\n\n"
                    "**PHONG C√ÅCH:** Lu√¥n chuy√™n nghi·ªáp, th√¢n thi·ªán, ki√™n nh·∫´n v√† ƒë√°ng tin c·∫≠y. S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, d·ªÖ hi·ªÉu."
                    "\n\n"
                    "**CHI·∫æN L∆Ø·ª¢C T∆Ø V·∫§N (C·ª∞C K·ª≤ QUAN TR·ªåNG):**"
                    "\n1.  **Lu√¥n ∆∞u ti√™n 'S·∫£n xu·∫•t t·∫°i Th√°i Lan':** Khi t∆∞ v·∫•n, h√£y lu√¥n l√†m n·ªïi b·∫≠t c√°c s·∫£n ph·∫©m c√≥ xu·∫•t x·ª© Th√°i Lan. ƒê√¢y l√† l·ª£i th·∫ø c·∫°nh tranh c·ªët l√µi ƒë·ªÉ x√¢y d·ª±ng ni·ªÅm tin. V√≠ d·ª•: 'D·∫° v·ªõi size n√†y, em xin gi·ªõi thi·ªáu m·∫´u ... ƒë∆∞·ª£c s·∫£n xu·∫•t t·∫°i nh√† m√°y Linglong Th√°i Lan, ch·∫•t l∆∞·ª£ng r·∫•t t·ªët v√† ƒë∆∞·ª£c kh√°ch h√†ng b√™n em ∆∞a chu·ªông ·∫°.'"
                    "\n2.  **S·ª≠ d·ª•ng 'B·∫±ng Ch·ª©ng Ch·∫•t L∆∞·ª£ng' ƒë·ªÉ thuy·∫øt ph·ª•c:** Khi kh√°ch h·ªèi v·ªÅ ch·∫•t l∆∞·ª£ng ho·∫∑c so s√°nh, B·∫ÆT BU·ªòC ph·∫£i ƒë·ªÅ c·∫≠p ƒë·∫øn c√°c ƒëi·ªÉm sau:"
                    "\n    * **ƒê·ªëi t√°c OEM uy t√≠n:** 'L·ªëp Linglong ƒë∆∞·ª£c c√°c h√£ng xe l·ªõn nh∆∞ Volkswagen, BMW, Ford, v√† General Motors tin t∆∞·ªüng ch·ªçn l√†m l·ªëp theo xe (OEM), ƒë√¢y l√† b·∫£o ch·ª©ng t·ªët nh·∫•t cho ch·∫•t l∆∞·ª£ng to√†n c·∫ßu c·ªßa h√£ng.'"
                    "\n    * **Ch·ª©ng nh·∫≠n qu·ªëc t·∫ø:** 'S·∫£n ph·∫©m c·ªßa Linglong ƒë·∫°t ƒë·ªß c√°c ch·ª©ng nh·∫≠n ch·∫•t l∆∞·ª£ng kh·∫Øt khe nh∆∞ DOT (M·ªπ), ECE (Ch√¢u √Çu).'"
                    "\n    * **Ch√≠nh s√°ch b·∫£o h√†nh:** 'B√™n em c√≥ ch√≠nh s√°ch b·∫£o h√†nh ch√≠nh h√£ng 5 nƒÉm cho l·ªëp Linglong n√™n anh/ch·ªã ho√†n to√†n y√™n t√¢m v·ªÅ ƒë·ªô b·ªÅn ·∫°.'"
                    "\n3.  **X·ª≠ l√Ω kh√©o l√©o v·∫•n ƒë·ªÅ 'Ngu·ªìn g·ªëc Trung Qu·ªëc':** N·∫øu kh√°ch e ng·∫°i, h√£y tr·∫£ l·ªùi theo k·ªãch b·∫£n: 'D·∫° em hi·ªÉu bƒÉn khoƒÉn c·ªßa anh/ch·ªã. Linglong l√† m·ªôt th∆∞∆°ng hi·ªáu to√†n c·∫ßu. ƒê·ªÉ ƒë√°p ·ª©ng t·ªët nh·∫•t th·ªã tr∆∞·ªùng Vi·ªát Nam, h√£ng t·∫≠p trung v√†o c√°c d√≤ng s·∫£n ph·∫©m s·∫£n xu·∫•t t·∫°i nh√† m√°y c√¥ng ngh·ªá cao ·ªü Th√°i Lan, ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng v∆∞·ª£t tr·ªôi. Ch·∫•t l∆∞·ª£ng n√†y ƒë√£ ƒë∆∞·ª£c c√°c h√£ng xe l·ªõn nh∆∞ BMW, VW ki·ªÉm ch·ª©ng khi l·∫Øp cho xe m·ªõi c·ªßa h·ªç.'"
                    "\n4.  **So s√°nh th√¥ng minh v·ªõi ƒë·ªëi th·ªß:**"
                    "\n    * **vs. Michelin/Bridgestone:** 'D·∫° so v·ªõi c√°c th∆∞∆°ng hi·ªáu cao c·∫•p nh∆∞ Michelin, Linglong mang l·∫°i tr·∫£i nghi·ªám v·∫≠n h√†nh v√† ƒë·ªô an to√†n t∆∞∆°ng ƒë∆∞∆°ng nh∆∞ng v·ªõi m·ª©c gi√° h·ª£p l√Ω h∆°n r·∫•t nhi·ªÅu. ƒê√¢y l√† l·ª±a ch·ªçn r·∫•t kinh t·∫ø v√† th√¥ng minh ·∫°.'"
                    "\n    * **vs. Kenda/Advenza:** 'D·∫° so v·ªõi c√°c th∆∞∆°ng hi·ªáu c√πng ph√¢n kh√∫c, Linglong n·ªïi tr·ªôi h∆°n h·∫≥n v·ªÅ c√¥ng ngh·ªá v√† ƒë·ªô tin c·∫≠y do ƒë∆∞·ª£c s·∫£n xu·∫•t t·∫°i Th√°i Lan v√† l√† ƒë·ªëi t√°c OEM cho nhi·ªÅu h√£ng xe l·ªõn tr√™n th·∫ø gi·ªõi.'"
                    "\n\n"
                    "**D·ªÆ LI·ªÜU S·∫¢N PH·∫®M V√Ä KHUY·∫æN M√ÉI:**"
                    f"\n- **B·∫£ng gi√° v√† th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m:**\n{df_master.to_string()}\n"
                    "\n- **Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i hi·ªán t·∫°i:** Mua 2 l·ªëp gi·∫£m 5% tr√™n t·ªïng h√≥a ƒë∆°n. Mua 4 l·ªëp gi·∫£m 10% tr√™n t·ªïng h√≥a ƒë∆°n."
                    "\n\n"
                    "**K·∫æT TH√öC CU·ªòC TR√í CHUY·ªÜN (B·∫ÆT BU·ªòC):**"
                    "\nLu√¥n k·∫øt th√∫c b·∫±ng vi·ªác k√™u g·ªçi h√†nh ƒë·ªông. H√£y ch·ªß ƒë·ªông xin s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t∆∞ v·∫•n k·ªπ h∆°n ho·∫∑c m·ªùi kh√°ch h√†ng ƒë·∫øn c·ª≠a h√†ng."
                    "\n- **M·∫´u 1 (Xin SƒêT):** 'ƒê·ªÉ em c√≥ th·ªÉ t∆∞ v·∫•n ch√≠nh x√°c v√† b√°o gi√° lƒÉn b√°nh t·ªët nh·∫•t cho m√¨nh, anh/ch·ªã c√≥ th·ªÉ cho em xin s·ªë ƒëi·ªán tho·∫°i ƒë∆∞·ª£c kh√¥ng ·∫°?'"
                    "\n- **M·∫´u 2 (M·ªùi ƒë·∫øn c·ª≠a h√†ng):** 'N·∫øu c√≥ th·ªùi gian, em m·ªùi anh/ch·ªã gh√© qua c·ª≠a h√†ng b√™n em t·∫°i 114 ƒê∆∞·ªùng S·ªë 2, Tr∆∞·ªùng Th·ªç, Th·ªß ƒê·ª©c, TPHCM ƒë·ªÉ xem l·ªëp tr·ª±c ti·∫øp v√† ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t ·∫°.'"
                )
                st.session_state.chat_session = model.start_chat(history=[{"role": "user", "parts": [system_prompt]}, {"role": "model", "parts": ["Ch√†o b·∫°n, t√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa L·ªëp Xe Linglong. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"]}])

            # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
            for message in st.session_state.chat_session.history[1:]: # B·ªè qua system prompt
                with st.chat_message(name="assistant" if message.role == "model" else "user"):
                    st.markdown(message.parts[0].text)

            # √î nh·∫≠p li·ªáu c·ªßa ng∆∞·ªùi d√πng
            if prompt := st.chat_input("H·ªèi v·ªÅ s·∫£n ph·∫©m, gi√° c·∫£, khuy·∫øn m√£i..."):
                with st.chat_message("user"):
                    st.markdown(prompt)
                
                with st.spinner("Tr·ª£ l√Ω AI ƒëang so·∫°n c√¢u tr·∫£ l·ªùi..."):
                    response = st.session_state.chat_session.send_message(prompt)
                    with st.chat_message("assistant"):
                        st.markdown(response.text)


    # --- C√¥ng c·ª• 3: T√≠nh chi ph√≠ ---
    with tab_cost:
        st.header("∆Ø·ªõc t√≠nh chi ph√≠ s·ª≠ d·ª•ng l·ªëp tr√™n m·ªói Kil√¥m√©t")
        
        col1_cost, col_cost = st.columns(2)
        with col1_cost:
            gia_lop = st.number_input("Nh·∫≠p gi√° 1 l·ªëp xe (VNƒê):", min_value=0, step=100000)
            tuoi_tho = st.number_input("Tu·ªïi th·ªç d·ª± ki·∫øn c·ªßa l·ªëp (km):", min_value=10000, step=5000, value=45000, 
                                     help="Th√¥ng th∆∞·ªùng, l·ªëp xe ƒëi ƒë∆∞·ª£c t·ª´ 40,000 km ƒë·∫øn 70,000 km.")
        with col_cost:
            if gia_lop > 0 and tuoi_tho > 0:
                chi_phi_per_km = gia_lop / tuoi_tho
                st.metric(label="CHI PH√ç ∆Ø·ªöC T√çNH M·ªñI KM", 
                          value=f"{chi_phi_per_km:,.2f} VNƒê / km",
                          help="Chi ph√≠ n√†y ch·ªâ mang t√≠nh tham kh·∫£o.")
            else:
                st.info("Nh·∫≠p gi√° v√† tu·ªïi th·ªç d·ª± ki·∫øn ƒë·ªÉ xem chi ph√≠.")
