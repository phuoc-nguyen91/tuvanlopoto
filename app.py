import streamlit as st
import pandas as pd
import re

# --- PH·∫¶N 1: C·∫§U H√åNH TRANG WEB ---
# L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c g·ªçi ƒë·∫ßu ti√™n ƒë·ªÉ thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† layout cho trang
st.set_page_config(page_title="C√¥ng C·ª• Tra C·ª©u L·ªëp Xe", layout="wide")

# --- PH·∫¶N 2: T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ---
@st.cache_data # Decorator gi√∫p l∆∞u k·∫øt qu·∫£ x·ª≠ l√Ω d·ªØ li·ªáu, tƒÉng t·ªëc ƒë·ªô cho nh·ªØng l·∫ßn ch·∫°y sau
def load_tire_data():
    """
    H√†m n√†y c√≥ nhi·ªám v·ª• t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu l·ªëp t·ª´ c√°c file CSV.
    """
    try:
        # ƒê·ªçc file CSV v·ªõi ki·ªÉu d·ªØ li·ªáu l√† 'str' (vƒÉn b·∫£n) ƒë·ªÉ tr√°nh l·ªói
        df_prices_raw = pd.read_csv('B·∫¢NG GI√Å B√ÅN L·∫∫_19_05_2025.csv', dtype=str)
        # S·ª¨A ƒê·ªîI: S·ª≠ d·ª•ng file "M√£ Gai LINGLONG.csv" m·ªõi
        df_magai_raw = pd.read_csv('M√£ Gai LINGLONG.csv', dtype=str)

        # 1. X·ª¨ L√ù B·∫¢NG GI√Å (df_prices)
        price_cols = ['stt', 'quy_cach', 'ma_gai', 'gia_ban_le']
        num_price_cols = min(len(df_prices_raw.columns), len(price_cols))
        df_prices = df_prices_raw.iloc[:, :num_price_cols]
        df_prices.columns = price_cols[:num_price_cols]
        
        if 'gia_ban_le' in df_prices.columns:
            df_prices['gia_ban_le'] = pd.to_numeric(
                df_prices['gia_ban_le'].str.replace(r'[^\d]', '', regex=True), 
                errors='coerce'
            )
            df_prices.dropna(subset=['gia_ban_le'], inplace=True)

        # 2. X·ª¨ L√ù M√î T·∫¢ M√É GAI (df_magai)
        # TH√äM T√çNH NƒÇNG: Th√™m c√°c c·ªôt m·ªõi theo y√™u c·∫ßu
        magai_cols = ['ma_gai', 'nhu_cau', 'ung_dung_cu_the', 'uu_diem_cot_loi', 'link_hinh_anh']
        num_magai_cols = min(len(df_magai_raw.columns), len(magai_cols))
        df_magai = df_magai_raw.iloc[:, :num_magai_cols]
        df_magai.columns = magai_cols[:num_magai_cols]
        
        # 3. K·∫æT H·ª¢P C√ÅC B·∫¢NG D·ªÆ LI·ªÜU
        df_master = pd.merge(df_prices, df_magai, on='ma_gai', how='left')

        # ƒêi·ªÅn c√°c gi√° tr·ªã c√≤n tr·ªëng ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã l·ªói
        for col in ['nhu_cau', 'ung_dung_cu_the', 'uu_diem_cot_loi', 'link_hinh_anh']:
            if col not in df_master.columns:
                df_master[col] = 'Ch∆∞a c√≥ th√¥ng tin'
            df_master[col] = df_master[col].fillna('Ch∆∞a c√≥ th√¥ng tin')

        # L√†m s·∫°ch kho·∫£ng tr·∫Øng th·ª´a
        for col in df_master.columns:
             if df_master[col].dtype == 'object':
                df_master[col] = df_master[col].str.strip()
        
        return df_master

    except FileNotFoundError as e:
        st.error(f"L·ªói kh√¥ng t√¨m th·∫•y file: **{e.filename}**. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n file.")
        return pd.DataFrame() # Tr·∫£ v·ªÅ DataFrame r·ªóng n·∫øu c√≥ l·ªói
    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·ªçc file: {e}")
        return pd.DataFrame()


# --- PH·∫¶N 3: KH·ªûI T·∫†O V√Ä CH·∫†Y ·ª®NG D·ª§NG ---
df_master = load_tire_data()

# --- Giao di·ªán ch√≠nh ---
st.title("Ô∏èüöó B·ªò C√îNG C·ª§ TRA C·ª®U L·ªêP XE LINGLONG")
st.markdown("X√¢y d·ª±ng b·ªüi **Chuy√™n Gia L·ªëp Th·∫ßm L·∫∑ng** - D√†nh cho nh·ªØng l·ª±a ch·ªçn s√°ng su·ªët.")

if df_master.empty:
    st.warning("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng do l·ªói t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói ·ªü tr√™n.")
else:
    # Giao di·ªán ƒë∆∞·ª£c t·ªëi gi·∫£n, ch·ªâ c√≤n 2 Tab
    tab_search, tab_cost = st.tabs([
        "**üîç Tra C·ª©u L·ªëp Theo Size**", 
        "**üßÆ T√≠nh Chi Ph√≠ L·ªëp**"
    ])

    # --- C√¥ng c·ª• 1: Tra c·ª©u gi√° theo size ---
    with tab_search:
        st.header("Tra c·ª©u l·ªëp Linglong theo k√≠ch th∆∞·ªõc")
        
        size_query = st.text_input(
            "Nh·∫≠p k√≠ch th∆∞·ªõc l·ªëp b·∫°n mu·ªën t√¨m:", 
            placeholder="V√≠ d·ª•: 215/55R17 ho·∫∑c 185R14C"
        )

        if size_query: # T·ª± ƒë·ªông t√¨m ki·∫øm khi ng∆∞·ªùi d√πng nh·∫≠p
            search_term = size_query.strip()
            # T√¨m ki·∫øm g·∫ßn ƒë√∫ng v√† s·∫Øp x·∫øp theo gi√°
            results = df_master[df_master['quy_cach'].str.contains(search_term, case=False, na=False)]
            
            # Ch·ªâ s·∫Øp x·∫øp theo gi√° n·∫øu c·ªôt 'gia_ban_le' t·ªìn t·∫°i
            if 'gia_ban_le' in results.columns:
                results = results.sort_values(by="gia_ban_le")

            st.write("---")
            st.subheader(f"K·∫øt qu·∫£ t√¨m ki·∫øm cho \"{search_term}\"")
            
            if not results.empty:
                st.success(f"ƒê√£ t√¨m th·∫•y **{len(results)}** s·∫£n ph·∫©m ph√π h·ª£p.")
                
                # THAY ƒê·ªîI: Hi·ªÉn th·ªã k·∫øt qu·∫£ d·∫°ng b·∫£ng
                for index, row in results.iterrows():
                    st.markdown(f"#### {row['quy_cach']} / {row['ma_gai']}")
                    
                    price_str = f"{row['gia_ban_le']:,} VNƒê" if pd.notna(row['gia_ban_le']) else "Ch∆∞a c√≥ gi√°"
                    link_str = f"<a href='{row['link_hinh_anh']}' target='_blank'>Xem H√¨nh ·∫¢nh/Video</a>" if row['link_hinh_anh'] not in ['Ch∆∞a c√≥ th√¥ng tin', ''] else "Kh√¥ng c√≥"

                    # S·ª¨A L·ªñI: Thay th·∫ø to_markdown b·∫±ng c√°ch hi·ªÉn th·ªã tr·ª±c ti·∫øp v·ªõi st.columns ƒë·ªÉ tr√°nh l·ªói ImportError
                    col1, col2 = st.columns([1, 3])
                    with col1:
                        st.markdown("**Gi√° B√°n L·∫ª**")
                        st.markdown("**·ª®ng d·ª•ng c·ª• th·ªÉ**")
                        st.markdown("**∆Øu ƒëi·ªÉm c·ªët l√µi**")
                        st.markdown("**Ph√¢n lo·∫°i**")
                        st.markdown("**Media**")
                    with col2:
                        st.markdown(f"**{price_str}**")
                        st.markdown(row['ung_dung_cu_the'])
                        st.markdown(row['uu_diem_cot_loi'])
                        st.markdown(row['nhu_cau'])
                        st.markdown(link_str, unsafe_allow_html=True)
                    
                    st.write("---")

            else:
                st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc b·∫°n ƒë√£ nh·∫≠p.")
        else:
            st.info("Nh·∫≠p v√†o k√≠ch th∆∞·ªõc l·ªëp ·ªü tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu tra c·ª©u.")

    # --- C√¥ng c·ª• 2: T√≠nh chi ph√≠ ---
    with tab_cost:
        st.header("∆Ø·ªõc t√≠nh chi ph√≠ s·ª≠ d·ª•ng l·ªëp tr√™n m·ªói Kil√¥m√©t")
        
        col1_cost, col2_cost = st.columns(2)
        with col1_cost:
            gia_lop = st.number_input("Nh·∫≠p gi√° 1 l·ªëp xe (VNƒê):", min_value=0, step=100000)
            tuoi_tho = st.number_input("Tu·ªïi th·ªç d·ª± ki·∫øn c·ªßa l·ªëp (km):", min_value=10000, step=5000, value=45000, 
                                     help="Th√¥ng th∆∞·ªùng, l·ªëp xe ƒëi ƒë∆∞·ª£c t·ª´ 40,000 km ƒë·∫øn 70,000 km.")
        with col2_cost:
            if gia_lop > 0 and tuoi_tho > 0:
                chi_phi_per_km = gia_lop / tuoi_tho
                st.metric(label="CHI PH√ç ∆Ø·ªöC T√çNH M·ªñI KM", 
                          value=f"{chi_phi_per_km:,.2f} VNƒê / km",
                          help="Chi ph√≠ n√†y ch·ªâ mang t√≠nh tham kh·∫£o.")
            else:
                st.info("Nh·∫≠p gi√° v√† tu·ªïi th·ªç d·ª± ki·∫øn ƒë·ªÉ xem chi ph√≠.")
