import streamlit as st
import pandas as pd
import re
import google.generativeai as genai

# --- PH·∫¶N 1: C·∫§U H√åNH TRANG WEB ---
st.set_page_config(page_title="C√¥ng C·ª• Tra C·ª©u L·ªëp Xe", layout="wide")

# --- PH·∫¶N 1.5: C·∫§U H√åNH API AN TO√ÄN V·ªöI STREAMLIT SECRETS ---
api_configured = False
try:
    if 'google_api_key' in st.secrets:
        genai.configure(api_key=st.secrets["google_api_key"])
        api_configured = True
except Exception as e:
    print(f"L·ªói c·∫•u h√¨nh API: {e}")


# --- PH·∫¶N 2: T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ---
@st.cache_data
def load_all_data():
    """
    H√†m n√†y c√≥ nhi·ªám v·ª• t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ c√°c file CSV.
    """
    try:
        # ƒê·ªçc t·∫•t c·∫£ c√°c file CSV c·∫ßn thi·∫øt
        df_prices_raw = pd.read_csv('B·∫¢NG GI√Å B√ÅN L·∫∫_19_05_2025.csv', dtype=str)
        df_magai_raw = pd.read_csv('M√£ Gai LINGLONG.csv', dtype=str)
        df_xe1_raw = pd.read_csv('Tyre1.csv', dtype=str)
        df_xe2_raw = pd.read_csv('tyre_bosung.csv', dtype=str)

        # 1. X·ª¨ L√ù B·∫¢NG GI√Å
        price_cols = ['stt', 'quy_cach', 'ma_gai', 'gia_ban_le']
        df_prices = df_prices_raw.iloc[:, :len(price_cols)]
        df_prices.columns = price_cols
        
        if 'gia_ban_le' in df_prices.columns:
            df_prices['gia_ban_le'] = pd.to_numeric(
                df_prices['gia_ban_le'].str.replace(r'[^\d]', '', regex=True), 
                errors='coerce'
            )
            df_prices.dropna(subset=['gia_ban_le'], inplace=True)

        # 2. X·ª¨ L√ù M√î T·∫¢ M√É GAI
        magai_cols = ['ma_gai', 'nhu_cau', 'ung_dung_cu_the', 'uu_diem_cot_loi', 'link_hinh_anh']
        df_magai = df_magai_raw.iloc[:, :len(magai_cols)]
        df_magai.columns = magai_cols
        
        # 3. X·ª¨ L√ù D·ªÆ LI·ªÜU XE
        xe_cols = ['hang_xe', 'mau_xe', 'doi_xe', 'quy_cach']
        df_xe1 = df_xe1_raw.iloc[:, :len(xe_cols)]
        df_xe1.columns = xe_cols
        df_xe2 = df_xe2_raw.iloc[:, :len(xe_cols)]
        df_xe2.columns = xe_cols
        df_xe = pd.concat([df_xe1, df_xe2], ignore_index=True)
        df_xe.dropna(subset=['hang_xe', 'mau_xe', 'quy_cach'], inplace=True)
        
        # 4. K·∫æT H·ª¢P D·ªÆ LI·ªÜU L·ªêP
        df_master = pd.merge(df_prices, df_magai, on='ma_gai', how='left')

        # ƒêi·ªÅn v√† l√†m s·∫°ch d·ªØ li·ªáu
        for col in ['nhu_cau', 'ung_dung_cu_the', 'uu_diem_cot_loi', 'link_hinh_anh']:
            if col not in df_master.columns:
                df_master[col] = 'Ch∆∞a c√≥ th√¥ng tin'
            df_master[col] = df_master[col].fillna('Ch∆∞a c√≥ th√¥ng tin')

        for df in [df_master, df_xe]:
            for col in df.columns:
                if df[col].dtype == 'object':
                    df[col] = df[col].str.strip()
        
        return df_master, df_xe

    except FileNotFoundError as e:
        st.error(f"L·ªói kh√¥ng t√¨m th·∫•y file: **{e.filename}**. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return pd.DataFrame(), pd.DataFrame()
    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·ªçc file: {e}")
        return pd.DataFrame(), pd.DataFrame()

# --- PH·∫¶N 3: KH·ªûI T·∫†O V√Ä CH·∫†Y ·ª®NG D·ª§NG ---
df_master, df_xe = load_all_data()

# --- Giao di·ªán ch√≠nh ---
st.title("Ô∏èüöó B·ªò C√îNG C·ª§ TRA C·ª®U L·ªêP XE LINGLONG")
st.markdown("X√¢y d·ª±ng b·ªüi **Chuy√™n Gia L·ªëp Th·∫ßm L·∫∑ng** - D√†nh cho nh·ªØng l·ª±a ch·ªçn s√°ng su·ªët.")

if df_master.empty:
    st.warning("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng do l·ªói t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói ·ªü tr√™n.")
else:
    tab_search, tab_cost = st.tabs(["**üîç Tra C·ª©u L·ªëp Theo Size**", "**üßÆ T√≠nh Chi Ph√≠ L·ªëp**"])

    with tab_search:
        st.header("Tra c·ª©u l·ªëp Linglong theo k√≠ch th∆∞·ªõc")
        
        unique_sizes = sorted(df_master['quy_cach'].unique())
        options = ["--- Ch·ªçn ho·∫∑c t√¨m size l·ªëp ---"] + unique_sizes
        size_query = st.selectbox(
            "Ch·ªçn k√≠ch th∆∞·ªõc l·ªëp b·∫°n mu·ªën t√¨m:", 
            options=options,
            help="B·∫°n c√≥ th·ªÉ g√µ ƒë·ªÉ t√¨m ki·∫øm size trong danh s√°ch."
        )

        if size_query != "--- Ch·ªçn ho·∫∑c t√¨m size l·ªëp ---":
            results = df_master[df_master['quy_cach'] == size_query]
            if 'gia_ban_le' in results.columns:
                results = results.sort_values(by="gia_ban_le")

            st.write("---")
            st.subheader(f"K·∫øt qu·∫£ tra c·ª©u cho \"{size_query}\"")
            
            if not results.empty:
                st.success(f"ƒê√£ t√¨m th·∫•y **{len(results)}** s·∫£n ph·∫©m ph√π h·ª£p.")
                
                # --- Hi·ªÉn th·ªã th√¥ng tin t·ª´ file CSV tr∆∞·ªõc ---
                for index, row in results.iterrows():
                    price_str = f"{row['gia_ban_le']:,} VNƒê" if pd.notna(row['gia_ban_le']) else "Ch∆∞a c√≥ gi√°"
                    col_title, col_price = st.columns([3, 1])
                    with col_title:
                        st.markdown(f"#### {row['quy_cach']} / {row['ma_gai']}")
                    with col_price:
                        st.markdown(f"<div style='text-align: right; font-size: 1.2em; color: #28a745; font-weight: bold;'>{price_str}</div>", unsafe_allow_html=True)
                    
                    st.markdown(f"**üëç ∆Øu ƒëi·ªÉm c·ªët l√µi:** {row['uu_diem_cot_loi']}")
                    
                    # Hi·ªÉn th·ªã b·∫£ng gi√° khuy·∫øn m√£i
                    if pd.notna(row['gia_ban_le']):
                        with st.container():
                            st.markdown("üéÅ **B√°o gi√° khuy·∫øn m√£i:**")
                            price_for_2 = (row['gia_ban_le'] * 2) * 0.95
                            price_for_4 = (row['gia_ban_le'] * 4) * 0.90
                            promo_col1, promo_col2 = st.columns(2)
                            with promo_col1:
                                st.markdown(f"&nbsp;&nbsp;&nbsp;‚Ä¢ Mua 2 l·ªëp (gi·∫£m 5%): **<span style='color: #ff4b4b;'>{price_for_2:,.0f} VNƒê</span>**", unsafe_allow_html=True)
                            with promo_col2:
                                st.markdown(f"&nbsp;&nbsp;&nbsp;‚Ä¢ Mua 4 l·ªëp (gi·∫£m 10%): **<span style='color: #ff4b4b;'>{price_for_4:,.0f} VNƒê</span>**", unsafe_allow_html=True)
                    st.markdown("---")

                # --- Hi·ªÉn th·ªã th√¥ng tin t·ª´ AI v√† Web Search sau ---
                with st.expander("üöô **C√°c d√≤ng xe t∆∞∆°ng th√≠ch (Nh·∫•n ƒë·ªÉ xem)**", expanded=True):
                    # Hi·ªÉn th·ªã th√¥ng tin xe t·ª´ file CSV c√≥ s·∫µn
                    matching_cars_df = df_xe[df_xe['quy_cach'] == size_query]
                    if not matching_cars_df.empty:
                        st.markdown("**C√°c d√≤ng xe trong d·ªØ li·ªáu c√≥ s·∫µn:**")
                        st.dataframe(matching_cars_df[['hang_xe', 'mau_xe', 'doi_xe']].rename(columns={'hang_xe': 'H√£ng Xe', 'mau_xe': 'M·∫´u Xe', 'doi_xe': 'ƒê·ªùi Xe'}), use_container_width=True)
                    else:
                        st.info("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu xe t∆∞∆°ng th√≠ch trong h·ªá th·ªëng c√≥ s·∫µn.")

                    # G·ªçi AI ƒë·ªÉ t√¨m th√™m th√¥ng tin
                    if api_configured:
                        st.markdown("**G·ª£i √Ω th√™m t·ª´ AI (d·ª±a tr√™n d·ªØ li·ªáu web):**")
                        try:
                            model = genai.GenerativeModel('gemini-1.5-flash-latest')
                            prompt = f"Li·ªát k√™ c√°c d√≤ng xe ph·ªï bi·∫øn t·∫°i Vi·ªát Nam s·ª≠ d·ª•ng l·ªëp size {size_query}. Tr√¨nh b√†y d∆∞·ªõi d·∫°ng m·ªôt danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng ƒë∆°n gi·∫£n."
                            with st.spinner("AI ƒëang t√¨m ki·∫øm th√™m c√°c d√≤ng xe kh√°c..."):
                                response = model.generate_content(prompt)
                                st.markdown(response.text)
                        except Exception as e:
                            st.warning(f"Kh√¥ng th·ªÉ t√¨m ki·∫øm th√™m b·∫±ng AI: {e}")

                # Hi·ªÉn th·ªã CTA ·ªü cu·ªëi
                st.markdown("---")
                st.markdown("##### **ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† b√°o gi√° t·ªët nh·∫•t, vui l√≤ng li√™n h·ªá:**")
                col_cta_1, col_cta_2 = st.columns([2,1])
                with col_cta_1:
                    st.markdown("üìû **HOTLINE:** **0943 24 24 24**")
                    st.markdown("üí¨ **Zalo:** [https://zalo.me/0943242424](https://zalo.me/0943242424)")
                    st.markdown("üìç **ƒê·ªãa ch·ªâ:** 114 ƒê∆∞·ªùng S·ªë 2, Tr∆∞·ªùng Th·ªç, Th·ªß ƒê·ª©c, TPHCM")
                with col_cta_2:
                    try:
                        st.image("qr.jpg", width=150, caption="Qu√©t m√£ ƒë·ªÉ k·∫øt b·∫°n Zalo")
                    except:
                        st.info("Kh√¥ng t√¨m th·∫•y file qr.jpg")
                st.markdown("<hr style='border: 2px solid #ff4b4b; border-radius: 5px;'/>", unsafe_allow_html=True)

            else:
                st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc b·∫°n ƒë√£ ch·ªçn.")
        else:
            st.info("Vui l√≤ng ch·ªçn m·ªôt k√≠ch th∆∞·ªõc l·ªëp t·ª´ danh s√°ch ·ªü tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu tra c·ª©u.")

    with tab_cost:
        st.header("∆Ø·ªõc t√≠nh chi ph√≠ s·ª≠ d·ª•ng l·ªëp tr√™n m·ªói Kil√¥m√©t")
        col1_cost, col2_cost = st.columns(2)
        with col1_cost:
            gia_lop = st.number_input("Nh·∫≠p gi√° 1 l·ªëp xe (VNƒê):", min_value=0, step=100000)
            tuoi_tho = st.number_input("Tu·ªïi th·ªç d·ª± ki·∫øn c·ªßa l·ªëp (km):", min_value=10000, step=5000, value=45000, help="Th√¥ng th∆∞·ªùng, l·ªëp xe ƒëi ƒë∆∞·ª£c t·ª´ 40,000 km ƒë·∫øn 70,000 km.")
        with col2_cost:
            if gia_lop > 0 and tuoi_tho > 0:
                chi_phi_per_km = gia_lop / tuoi_tho
                st.metric(label="CHI PH√ç ∆Ø·ªöC T√çNH M·ªñI KM", value=f"{chi_phi_per_km:,.2f} VNƒê / km", help="Chi ph√≠ n√†y ch·ªâ mang t√≠nh tham kh·∫£o.")
            else:
                st.info("Nh·∫≠p gi√° v√† tu·ªïi th·ªç d·ª± ki·∫øn ƒë·ªÉ xem chi ph√≠.")
