import streamlit as st
import pandas as pd
import re

# --- PH·∫¶N 1: C·∫§U H√åNH TRANG WEB ---
# L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c g·ªçi ƒë·∫ßu ti√™n ƒë·ªÉ thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† layout cho trang
st.set_page_config(page_title="C√¥ng C·ª• T∆∞ V·∫•n L·ªëp Xe", layout="wide")

# --- PH·∫¶N 2: T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ---
@st.cache_data # Decorator gi√∫p l∆∞u k·∫øt qu·∫£ x·ª≠ l√Ω d·ªØ li·ªáu, tƒÉng t·ªëc ƒë·ªô cho nh·ªØng l·∫ßn ch·∫°y sau
def load_all_data():
    """
    H√†m n√†y c√≥ nhi·ªám v·ª• t·∫£i, x·ª≠ l√Ω v√† k·∫øt h·ª£p t·∫•t c·∫£ c√°c file d·ªØ li·ªáu.
    N√≥ s·∫Ω tr·∫£ v·ªÅ hai DataFrame: m·ªôt l√† d·ªØ li·ªáu l·ªëp t·ªïng h·ª£p, hai l√† d·ªØ li·ªáu xe.
    """
    try:
        # ƒê·ªçc t·∫•t c·∫£ file CSV v·ªõi ki·ªÉu d·ªØ li·ªáu l√† 'str' (vƒÉn b·∫£n) ƒë·ªÉ tr√°nh l·ªói
        df_prices_raw = pd.read_csv('B·∫¢NG GI√Å B√ÅN L·∫∫_19_05_2025.csv', dtype=str)
        df_magai_raw = pd.read_csv('M√£ Gai LINGLONG - M√£ Gai.csv', dtype=str)
        df_xe1_raw = pd.read_csv('Tyre1.csv', dtype=str)
        df_xe2_raw = pd.read_csv('tyre_bosung.csv', dtype=str)

        # 1. X·ª¨ L√ù B·∫¢NG GI√Å (df_prices)
        price_cols = ['stt', 'quy_cach', 'ma_gai', 'xuat_xu', 'gia_ban_le']
        num_price_cols = min(len(df_prices_raw.columns), len(price_cols))
        df_prices = df_prices_raw.iloc[:, :num_price_cols]
        df_prices.columns = price_cols[:num_price_cols]
        
        if 'gia_ban_le' in df_prices.columns:
            df_prices['gia_ban_le'] = pd.to_numeric(
                df_prices['gia_ban_le'].str.replace(r'[^\d]', '', regex=True), 
                errors='coerce'
            )
            df_prices.dropna(subset=['gia_ban_le'], inplace=True)

        # 2. X·ª¨ L√ù M√î T·∫¢ M√É GAI (df_magai)
        magai_cols = ['ma_gai', 'mo_ta_gai', 'nhu_cau']
        num_magai_cols = min(len(df_magai_raw.columns), len(magai_cols))
        df_magai = df_magai_raw.iloc[:, :num_magai_cols]
        df_magai.columns = magai_cols[:num_magai_cols]
        
        # 3. X·ª¨ L√ù D·ªÆ LI·ªÜU XE (df_xe1, df_xe2)
        xe_cols = ['hang_xe', 'mau_xe', 'doi_xe', 'quy_cach']
        
        num_xe1_cols = min(len(df_xe1_raw.columns), len(xe_cols))
        df_xe1 = df_xe1_raw.iloc[:, :num_xe1_cols]
        df_xe1.columns = xe_cols[:num_xe1_cols]

        num_xe2_cols = min(len(df_xe2_raw.columns), len(xe_cols))
        df_xe2 = df_xe2_raw.iloc[:, :num_xe2_cols]
        df_xe2.columns = xe_cols[:num_xe2_cols]

        df_xe = pd.concat([df_xe1, df_xe2], ignore_index=True)
        df_xe.dropna(subset=['hang_xe', 'mau_xe', 'quy_cach'], inplace=True)
        
        # T·∫°o c·ªôt 'display_name' ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
        df_xe['display_name'] = df_xe['hang_xe'] + " " + df_xe['mau_xe']

        # 4. K·∫æT H·ª¢P C√ÅC B·∫¢NG D·ªÆ LI·ªÜU
        df_master = pd.merge(df_prices, df_magai, on='ma_gai', how='left')

        # ƒêi·ªÅn c√°c gi√° tr·ªã c√≤n tr·ªëng
        if 'nhu_cau' not in df_master.columns: df_master['nhu_cau'] = 'Ti√™u chu·∫©n'
        df_master['nhu_cau'] = df_master['nhu_cau'].fillna('Ti√™u chu·∫©n')
        
        if 'mo_ta_gai' not in df_master.columns: df_master['mo_ta_gai'] = 'Gai l·ªëp ti√™u chu·∫©n.'
        df_master['mo_ta_gai'] = df_master['mo_ta_gai'].fillna('Gai l·ªëp ti√™u chu·∫©n c·ªßa Linglong.')

        # L√†m s·∫°ch kho·∫£ng tr·∫Øng th·ª´a
        for col in ['quy_cach', 'ma_gai', 'xuat_xu', 'nhu_cau']:
             if col in df_master.columns:
                df_master[col] = df_master[col].str.strip()
        
        for col in ['hang_xe', 'mau_xe', 'quy_cach']:
             if col in df_xe.columns:
                df_xe[col] = df_xe[col].str.strip()

        return df_master, df_xe

    except FileNotFoundError as e:
        st.error(f"L·ªói kh√¥ng t√¨m th·∫•y file: **{e.filename}**. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n file.")
        return pd.DataFrame(), pd.DataFrame()
    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒë·ªçc file: {e}")
        return pd.DataFrame(), pd.DataFrame()


# --- PH·∫¶N 3: KH·ªûI T·∫†O V√Ä CH·∫†Y ·ª®NG D·ª§NG ---
df_master, df_xe = load_all_data()

# --- Giao di·ªán ch√≠nh ---
st.title("Ô∏èüöó B·ªò C√îNG C·ª§ T∆Ø V·∫§N L·ªêP XE LINGLONG")
st.markdown("X√¢y d·ª±ng b·ªüi **Chuy√™n Gia L·ªëp Th·∫ßm L·∫∑ng** - D√†nh cho nh·ªØng l·ª±a ch·ªçn s√°ng su·ªët.")

if df_master.empty or df_xe.empty:
    st.warning("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng do l·ªói t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói ·ªü tr√™n.")
else:
    # THAY ƒê·ªîI: Th√™m Tab "Tra C·ª©u Theo Size" v√† ƒë·ªïi t√™n c√°c Tab c≈©
    tab1, tab2, tab3 = st.tabs([
        "**‚öôÔ∏è T∆∞ V·∫•n Theo Xe**", 
        "**üîç Tra C·ª©u Theo Size**", 
        "**üßÆ T√≠nh Chi Ph√≠ L·ªëp**"
    ])

    # --- C√¥ng c·ª• 1: T∆∞ v·∫•n theo xe ---
    with tab1:
        st.header("T√¨m l·ªëp Linglong ph√π h·ª£p v·ªõi xe c·ªßa b·∫°n")
        
        col1, col2 = st.columns(2)
        with col1:
            hang_xe_list = sorted(df_xe['hang_xe'].unique())
            selected_hang_xe = st.selectbox("1. Ch·ªçn H√£ng Xe:", hang_xe_list)
        with col2:
            mau_xe_list = sorted(df_xe[df_xe['hang_xe'] == selected_hang_xe]['mau_xe'].unique())
            selected_mau_xe = st.selectbox("2. Ch·ªçn M·∫´u Xe:", mau_xe_list)

        lop_theo_xe_series = df_xe[(df_xe['hang_xe'] == selected_hang_xe) & (df_xe['mau_xe'] == selected_mau_xe)]['quy_cach']
        
        if not lop_theo_xe_series.empty:
            lop_theo_xe = lop_theo_xe_series.iloc[0]
            
            col_kich_thuoc, col_nhu_cau = st.columns(2)
            with col_kich_thuoc:
                 st.text_input("3. K√≠ch th∆∞·ªõc l·ªëp theo xe:", value=lop_theo_xe, disabled=True, key="lop_theo_xe_display")
            
            # S·ª¨A L·ªñI LOGIC: Th√™m t√πy ch·ªçn "T·∫•t c·∫£" cho nhu c·∫ßu
            nhu_cau_list = ['T·∫•t c·∫£'] + sorted(df_master[df_master['quy_cach'].str.contains(lop_theo_xe, case=False, na=False)]['nhu_cau'].unique())
            
            with col_nhu_cau:
                selected_nhu_cau = st.selectbox("4. Ch·ªçn nhu c·∫ßu ch√≠nh c·ªßa b·∫°n:", nhu_cau_list, help="√äm √°i, Ti·∫øt ki·ªám, Th·ªÉ thao hay ƒêa d·ª•ng?")

            if st.button("üîç T√¨m L·ªëp Ngay", type="primary", use_container_width=True):
                # S·ª¨A L·ªñI LOGIC: D√πng .str.contains thay v√¨ == ƒë·ªÉ t√¨m ki·∫øm linh ho·∫°t h∆°n
                results = df_master[df_master['quy_cach'].str.contains(lop_theo_xe, case=False, na=False)]
                
                # L·ªçc th√™m theo nhu c·∫ßu n·∫øu ng∆∞·ªùi d√πng kh√¥ng ch·ªçn "T·∫•t c·∫£"
                if selected_nhu_cau != 'T·∫•t c·∫£':
                    results = results[results['nhu_cau'] == selected_nhu_cau]

                st.success(f"ƒê√£ t√¨m th·∫•y **{len(results)}** lo·∫°i l·ªëp ph√π h·ª£p cho xe **{selected_hang_xe} {selected_mau_xe}**.")
                if not results.empty:
                    for index, row in results.iterrows():
                        with st.expander(f"**M√£ gai: {row['ma_gai']}** - Gi√°: {row['gia_ban_le']:,} VNƒê", expanded=True):
                            st.markdown(f"**- M√¥ t·∫£:** {row['mo_ta_gai']}\n\n**- Nhu c·∫ßu:** {row['nhu_cau']}\n\n**- Xu·∫•t x·ª©:** {row['xuat_xu'].title()}")
                else:
                    st.warning("R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y l·ªëp Linglong n√†o kh·ªõp ch√≠nh x√°c v·ªõi l·ª±a ch·ªçn n√†y.")
        else:
            st.error(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu l·ªëp cho xe {selected_hang_xe} {selected_mau_xe}.")

    # --- C√¥ng c·ª• 2: Tra c·ª©u gi√° theo size (T√çNH NƒÇNG M·ªöI) ---
    with tab2:
        st.header("Tra c·ª©u gi√° l·ªëp Linglong theo k√≠ch th∆∞·ªõc")
        
        size_query = st.text_input(
            "Nh·∫≠p k√≠ch th∆∞·ªõc l·ªëp b·∫°n mu·ªën t√¨m:", 
            placeholder="V√≠ d·ª•: 215/55R17 ho·∫∑c 185R14C"
        )

        if size_query: # T·ª± ƒë·ªông t√¨m ki·∫øm khi ng∆∞·ªùi d√πng nh·∫≠p
            search_term = size_query.strip()
            # S·ª¨A L·ªñI KEYERROR: Thay "gia ban le" b·∫±ng "gia_ban_le"
            results = df_master[df_master['quy_cach'].str.contains(search_term, case=False, na=False)].sort_values(by="gia_ban_le")
            
            st.write("---")
            st.subheader(f"K·∫øt qu·∫£ t√¨m ki·∫øm cho \"{search_term}\"")
            
            if not results.empty:
                st.success(f"ƒê√£ t√¨m th·∫•y **{len(results)}** s·∫£n ph·∫©m ph√π h·ª£p.")
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong c√°c th·∫ª ƒë·∫πp m·∫Øt
                for index, row in results.iterrows():
                    with st.container():
                        st.markdown(f"#### {row['quy_cach']}")
                        st.markdown(f"**M√£ gai:** {row['ma_gai']} | **Gi√° b√°n l·∫ª:** <span style='color: #28a745; font-weight: bold;'>{row['gia_ban_le']:,} VNƒê</span>", unsafe_allow_html=True)
                        st.markdown(f"**Nhu c·∫ßu:** {row['nhu_cau']}")
                        st.markdown(f"**M√¥ t·∫£:** {row['mo_ta_gai']}")
                        st.markdown("---")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc b·∫°n ƒë√£ nh·∫≠p.")
        else:
            st.info("Nh·∫≠p v√†o k√≠ch th∆∞·ªõc l·ªëp ·ªü tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu tra c·ª©u.")

    # --- C√¥ng c·ª• 3: T√≠nh chi ph√≠ ---
    with tab3:
        st.header("∆Ø·ªõc t√≠nh chi ph√≠ s·ª≠ d·ª•ng l·ªëp tr√™n m·ªói Kil√¥m√©t")
        
        col1_cost, col2_cost = st.columns(2)
        with col1_cost:
            gia_lop = st.number_input("Nh·∫≠p gi√° 1 l·ªëp xe (VNƒê):", min_value=0, step=100000)
            tuoi_tho = st.number_input("Tu·ªïi th·ªç d·ª± ki·∫øn c·ªßa l·ªëp (km):", min_value=10000, step=5000, value=45000, 
                                     help="Th√¥ng th∆∞·ªùng, l·ªëp xe ƒëi ƒë∆∞·ª£c t·ª´ 40,000 km ƒë·∫øn 70,000 km.")
        with col2_cost:
            if gia_lop > 0 and tuoi_tho > 0:
                chi_phi_per_km = gia_lop / tuoi_tho
                st.metric(label="CHI PH√ç ∆Ø·ªöC T√çNH M·ªñI KM", 
                          value=f"{chi_phi_per_km:,.2f} VNƒê / km",
                          help="Chi ph√≠ n√†y ch·ªâ mang t√≠nh tham kh·∫£o.")
            else:
                st.info("Nh·∫≠p gi√° v√† tu·ªïi th·ªç d·ª± ki·∫øn ƒë·ªÉ xem chi ph√≠.")
