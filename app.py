import streamlit as st
import pandas as pd
import re

# --- PH·∫¶N 1: C·∫§U H√åNH TRANG WEB ---
# L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c g·ªçi ƒë·∫ßu ti√™n ƒë·ªÉ thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† layout cho trang
st.set_page_config(page_title="C√¥ng C·ª• T∆∞ V·∫•n L·ªëp Xe", layout="wide")

# --- PH·∫¶N 2: T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ---
@st.cache_data # Decorator gi√∫p l∆∞u k·∫øt qu·∫£ x·ª≠ l√Ω d·ªØ li·ªáu, tƒÉng t·ªëc ƒë·ªô cho nh·ªØng l·∫ßn ch·∫°y sau
def load_all_data():
    """
    H√†m n√†y c√≥ nhi·ªám v·ª• t·∫£i, x·ª≠ l√Ω v√† k·∫øt h·ª£p t·∫•t c·∫£ c√°c file d·ªØ li·ªáu.
    N√≥ s·∫Ω tr·∫£ v·ªÅ hai DataFrame: m·ªôt l√† d·ªØ li·ªáu l·ªëp t·ªïng h·ª£p, hai l√† d·ªØ li·ªáu xe.
    """
    try:
        # ƒê·ªçc t·∫•t c·∫£ file CSV v·ªõi ki·ªÉu d·ªØ li·ªáu l√† 'str' (vƒÉn b·∫£n) ƒë·ªÉ tr√°nh l·ªói
        df_prices_raw = pd.read_csv('B·∫¢NG GI√Å B√ÅN L·∫∫_19_05_2025.csv', dtype=str)
        df_magai_raw = pd.read_csv('M√£ Gai LINGLONG - M√£ Gai.csv', dtype=str)
        df_xe1_raw = pd.read_csv('Tyre1.csv', dtype=str)
        df_xe2_raw = pd.read_csv('tyre_bosung.csv', dtype=str)

        # 1. X·ª¨ L√ù B·∫¢NG GI√Å (df_prices)
        price_cols = ['stt', 'quy_cach', 'ma_gai', 'xuat_xu', 'gia_ban_le']
        # S·ª¨A L·ªñI: L·∫•y ƒë√∫ng s·ªë c·ªôt c√≥ trong file v√† g√°n t√™n t∆∞∆°ng ·ª©ng
        num_price_cols = min(len(df_prices_raw.columns), len(price_cols))
        df_prices = df_prices_raw.iloc[:, :num_price_cols]
        df_prices.columns = price_cols[:num_price_cols]
        
        if 'gia_ban_le' in df_prices.columns:
            # Chuy·ªÉn c·ªôt gi√° th√†nh d·∫°ng s·ªë ƒë·ªÉ t√≠nh to√°n
            df_prices['gia_ban_le'] = pd.to_numeric(
                df_prices['gia_ban_le'].str.replace(r'[^\d]', '', regex=True), 
                errors='coerce'
            )
            df_prices.dropna(subset=['gia_ban_le'], inplace=True) # X√≥a d√≤ng kh√¥ng c√≥ gi√° h·ª£p l·ªá

        # 2. X·ª¨ L√ù M√î T·∫¢ M√É GAI (df_magai)
        magai_cols = ['ma_gai', 'mo_ta_gai', 'nhu_cau']
        # S·ª¨A L·ªñI: L·∫•y ƒë√∫ng s·ªë c·ªôt c√≥ trong file v√† g√°n t√™n t∆∞∆°ng ·ª©ng
        num_magai_cols = min(len(df_magai_raw.columns), len(magai_cols))
        df_magai = df_magai_raw.iloc[:, :num_magai_cols]
        df_magai.columns = magai_cols[:num_magai_cols]
        
        # 3. X·ª¨ L√ù D·ªÆ LI·ªÜU XE (df_xe1, df_xe2)
        xe_cols = ['hang_xe', 'mau_xe', 'doi_xe', 'quy_cach']
        # S·ª¨A L·ªñI: X·ª≠ l√Ω t·ª´ng file ri√™ng l·∫ª tr∆∞·ªõc khi g·ªôp
        num_xe1_cols = min(len(df_xe1_raw.columns), len(xe_cols))
        df_xe1 = df_xe1_raw.iloc[:, :num_xe1_cols]
        df_xe1.columns = xe_cols[:num_xe1_cols]

        num_xe2_cols = min(len(df_xe2_raw.columns), len(xe_cols))
        df_xe2 = df_xe2_raw.iloc[:, :num_xe2_cols]
        df_xe2.columns = xe_cols[:num_xe2_cols]

        df_xe = pd.concat([df_xe1, df_xe2], ignore_index=True)
        df_xe.dropna(subset=['hang_xe', 'mau_xe', 'quy_cach'], inplace=True) # X√≥a c√°c d√≤ng thi·∫øu th√¥ng tin c∆° b·∫£n
        
        # T·∫°o c·ªôt 'display_name' ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
        df_xe['display_name'] = df_xe['hang_xe'] + " " + df_xe['mau_xe']

        # 4. K·∫æT H·ª¢P C√ÅC B·∫¢NG D·ªÆ LI·ªÜU
        df_master = pd.merge(df_prices, df_magai, on='ma_gai', how='left')

        # ƒêi·ªÅn c√°c gi√° tr·ªã c√≤n tr·ªëng ƒë·ªÉ ·ª©ng d·ª•ng kh√¥ng b·ªã l·ªói
        if 'nhu_cau' not in df_master.columns: df_master['nhu_cau'] = 'Ti√™u chu·∫©n'
        df_master['nhu_cau'] = df_master['nhu_cau'].fillna('Ti√™u chu·∫©n')
        
        if 'mo_ta_gai' not in df_master.columns: df_master['mo_ta_gai'] = 'Gai l·ªëp ti√™u chu·∫©n.'
        df_master['mo_ta_gai'] = df_master['mo_ta_gai'].fillna('Gai l·ªëp ti√™u chu·∫©n c·ªßa Linglong.')

        # L√†m s·∫°ch kho·∫£ng tr·∫Øng th·ª´a ·ªü c√°c c·ªôt chu·ªói quan tr·ªçng
        for col in ['quy_cach', 'ma_gai', 'xuat_xu', 'nhu_cau']:
             if col in df_master.columns:
                df_master[col] = df_master[col].str.strip()
        
        for col in ['hang_xe', 'mau_xe', 'quy_cach']:
             if col in df_xe.columns:
                df_xe[col] = df_xe[col].str.strip()

        return df_master, df_xe

    except FileNotFoundError as e:
        st.error(f"L·ªói kh√¥ng t√¨m th·∫•y file: **{e.filename}**. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n file v√† ƒë·∫£m b·∫£o n√≥ n·∫±m c√πng th∆∞ m·ª•c v·ªõi ·ª©ng d·ª•ng.")
        return pd.DataFrame(), pd.DataFrame()
    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒë·ªçc v√† x·ª≠ l√Ω file: {e}")
        return pd.DataFrame(), pd.DataFrame()


# --- PH·∫¶N 3: KH·ªûI T·∫†O V√Ä CH·∫†Y ·ª®NG D·ª§NG ---

# G·ªçi h√†m ƒë·ªÉ t·∫£i d·ªØ li·ªáu
df_master, df_xe = load_all_data()

# --- Giao di·ªán ch√≠nh ---
st.title("Ô∏èüöó B·ªò C√îNG C·ª§ T∆Ø V·∫§N L·ªêP XE LINGLONG")
st.markdown("X√¢y d·ª±ng b·ªüi **Chuy√™n Gia L·ªëp Th·∫ßm L·∫∑ng** - D√†nh cho nh·ªØng l·ª±a ch·ªçn s√°ng su·ªët.")

# Ch·ªâ hi·ªÉn th·ªã giao di·ªán khi ƒë√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng
if df_master.empty or df_xe.empty:
    st.warning("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng do l·ªói t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng b√°o l·ªói ·ªü tr√™n.")
else:
    # T·∫°o c√°c Tab ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa 2 c√¥ng c·ª•
    tab1, tab2 = st.tabs(["**‚öôÔ∏è C√¥ng C·ª• T∆∞ V·∫•n L·ªëp Xe**", "**üßÆ C√¥ng C·ª• T√≠nh Chi Ph√≠ L·ªëp**"])

    # --- C√¥ng c·ª• 1: T∆∞ v·∫•n l·ªëp ---
    with tab1:
        st.header("T√¨m l·ªëp Linglong ph√π h·ª£p v·ªõi xe c·ªßa b·∫°n")
        
        col1, col2, col3 = st.columns(3)

        with col1:
            # Dropdown ch·ªçn h√£ng xe
            hang_xe_list = sorted(df_xe['hang_xe'].unique())
            selected_hang_xe = st.selectbox("1. Ch·ªçn H√£ng Xe:", hang_xe_list)

        with col2:
            # Dropdown ch·ªçn m·∫´u xe, t·ª± ƒë·ªông c·∫≠p nh·∫≠t theo h√£ng xe
            mau_xe_list = sorted(df_xe[df_xe['hang_xe'] == selected_hang_xe]['mau_xe'].unique())
            selected_mau_xe = st.selectbox("2. Ch·ªçn M·∫´u Xe:", mau_xe_list)

        # L·∫•y quy c√°ch l·ªëp t∆∞∆°ng ·ª©ng v·ªõi xe ƒë√£ ch·ªçn
        lop_theo_xe_series = df_xe[(df_xe['hang_xe'] == selected_hang_xe) & (df_xe['mau_xe'] == selected_mau_xe)]['quy_cach']
        
        if not lop_theo_xe_series.empty:
            lop_theo_xe = lop_theo_xe_series.iloc[0]
            with col3:
                 st.text_input("3. K√≠ch th∆∞·ªõc l·ªëp theo xe:", value=lop_theo_xe, disabled=True)
            
            # Dropdown ch·ªçn nhu c·∫ßu s·ª≠ d·ª•ng
            nhu_cau_list = sorted(df_master['nhu_cau'].unique())
            selected_nhu_cau = st.selectbox("4. Ch·ªçn nhu c·∫ßu ch√≠nh c·ªßa b·∫°n:", nhu_cau_list, help="√äm √°i, Ti·∫øt ki·ªám, Th·ªÉ thao hay ƒêa d·ª•ng?")

            # N√∫t t√¨m ki·∫øm
            if st.button("üîç T√¨m L·ªëp Ngay", type="primary"):
                # L·ªçc k·∫øt qu·∫£ t·ª´ b·∫£ng d·ªØ li·ªáu t·ªïng h·ª£p
                results = df_master[(df_master['quy_cach'] == lop_theo_xe) & (df_master['nhu_cau'] == selected_nhu_cau)]
                
                st.success(f"ƒê√£ t√¨m th·∫•y **{len(results)}** lo·∫°i l·ªëp ph√π h·ª£p cho xe **{selected_hang_xe} {selected_mau_xe}** v·ªõi k√≠ch th∆∞·ªõc **{lop_theo_xe}**.")

                if not results.empty:
                    # Hi·ªÉn th·ªã t·ª´ng k·∫øt qu·∫£
                    for index, row in results.iterrows():
                        with st.expander(f"**M√£ gai: {row['ma_gai']}** - Gi√°: {row['gia_ban_le']:,} VNƒê", expanded=True):
                            st.markdown(f"**- M√¥ t·∫£:** {row['mo_ta_gai']}")
                            st.markdown(f"**- Nhu c·∫ßu:** {row['nhu_cau']}")
                            st.markdown(f"**- Xu·∫•t x·ª©:** {row['xuat_xu'].title()}")
                            st.markdown(f"---")
                else:
                    st.warning("R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y l·ªëp Linglong n√†o kh·ªõp ch√≠nh x√°c v·ªõi l·ª±a ch·ªçn n√†y. Th·ª≠ ch·ªçn nhu c·∫ßu 'Ti√™u chu·∫©n' xem sao nh√©!")
        else:
            st.error(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu l·ªëp cho xe {selected_hang_xe} {selected_mau_xe}. Vui l√≤ng ki·ªÉm tra l·∫°i file d·ªØ li·ªáu xe.")

    # --- C√¥ng c·ª• 2: T√≠nh chi ph√≠ l·ªëp ---
    with tab2:
        st.header("∆Ø·ªõc t√≠nh chi ph√≠ s·ª≠ d·ª•ng l·ªëp tr√™n m·ªói Kil√¥m√©t")
        
        col1_cost, col2_cost = st.columns(2)

        with col1_cost:
            gia_lop = st.number_input("Nh·∫≠p gi√° 1 l·ªëp xe (VNƒê):", min_value=0, step=100000)
            tuoi_tho = st.number_input("Tu·ªïi th·ªç d·ª± ki·∫øn c·ªßa l·ªëp (km):", min_value=10000, step=5000, value=45000, 
                                     help="Th√¥ng th∆∞·ªùng, l·ªëp xe ƒëi ƒë∆∞·ª£c t·ª´ 40,000 km ƒë·∫øn 70,000 km t√πy lo·∫°i v√† ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng.")

        if gia_lop > 0 and tuoi_tho > 0:
            chi_phi_per_km = gia_lop / tuoi_tho
            with col2_cost:
                st.metric(label="CHI PH√ç ∆Ø·ªöC T√çNH M·ªñI KM", 
                          value=f"{chi_phi_per_km:,.2f} VNƒê / km",
                          help="Chi ph√≠ n√†y ch·ªâ mang t√≠nh tham kh·∫£o, kh√¥ng bao g·ªìm c√°c chi ph√≠ l·∫Øp ƒë·∫∑t, c√¢n b·∫±ng ƒë·ªông...")
        else:
            with col2_cost:
                st.info("Nh·∫≠p gi√° v√† tu·ªïi th·ªç d·ª± ki·∫øn ƒë·ªÉ xem chi ph√≠.")
